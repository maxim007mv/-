// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞—Å—Ç–∞–≤–∫–æ–π
document.addEventListener('DOMContentLoaded', function() {
    const intro = document.getElementById('intro');
    const mainContent = document.getElementById('mainContent');
    const startButton = document.getElementById('startButton');
    const form = document.getElementById('travelForm');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"
    startButton.addEventListener('click', function() {
        intro.style.display = 'none';
        mainContent.style.display = 'flex';
    });

    // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    window.returnToHome = function() {
        mainContent.style.display = 'none';
        intro.style.display = 'flex';
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        form.reset();
        // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∏ —Å–µ–∫—Ü–∏–π
        resetForm();
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    window.nextSection = function(step) {
        const sections = document.querySelectorAll('.form-section');
        sections.forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById('section' + step).classList.add('active');
        
        updateProgressBar(step);
    }

    // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    window.prevSection = function(step) {
        const sections = document.querySelectorAll('.form-section');
        sections.forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById('section' + step).classList.add('active');
        
        updateProgressBar(step);
    }

    function updateProgressBar(step) {
        const progressSteps = document.querySelectorAll('.progress-step');
        progressSteps.forEach((stepEl, index) => {
            if (index < step) {
                stepEl.classList.add('active');
            } else {
                stepEl.classList.remove('active');
            }
        });
    }

    function resetForm() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é
        document.querySelectorAll('.form-section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById('section1').classList.add('active');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        document.querySelectorAll('.progress-step').forEach((step, index) => {
            if (index === 0) {
                step.classList.add('active');
            } else {
                step.classList.remove('active');
            }
        });
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        alert('–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
        returnToHome();
    });
});

// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function updateProgressBar(sectionNumber) {
    const progressSteps = document.querySelectorAll('.progress-step');
    progressSteps.forEach((step, index) => {
        if (index < sectionNumber) {
            step.classList.add('active');
            step.style.animation = 'pulse 0.5s ease-out';
        } else {
            step.classList.remove('active');
            step.style.animation = '';
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
document.getElementById('travelForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = {
        startDate: formData.get('startDate'),
        endDate: formData.get('endDate'),
        country: formData.get('country'),
        format: Array.from(formData.getAll('format')),
        goals: Array.from(formData.getAll('goals')),
        budget: formData.get('budget'),
        additionalWishes: formData.get('additionalWishes')
    };

    try {
        showLoadingOverlay();
        const response = await fetch('http://localhost:3000/generate-plan', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            const result = await response.json();
            hideLoadingOverlay();
            showSuccessAnimation(result.plan, data);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        hideLoadingOverlay();
        showErrorMessage();
    }
});

function showLoadingOverlay() {
    const overlay = document.createElement('div');
    overlay.className = 'loading-overlay';
    overlay.innerHTML = `
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <p>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç...</p>
        </div>
    `;
    document.body.appendChild(overlay);
}

function hideLoadingOverlay() {
    const overlay = document.querySelector('.loading-overlay');
    if (overlay) {
        overlay.remove();
    }
}

function formatPlanSection(title, content, icon) {
    return `
        <div class="plan-section ${title.toLowerCase()}">
            <h3><span class="section-icon">${icon}</span>${title}</h3>
            ${content}
        </div>
    `;
}

function showSuccessAnimation(planText, formData) {
    const successOverlay = document.createElement('div');
    successOverlay.className = 'success-overlay';
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º markdown –Ω–∞ —Å–µ–∫—Ü–∏–∏
    const sections = planText.split('\n#').map(section => section.trim());
    let formattedSections = '';
    
    sections.forEach(section => {
        if (section.startsWith('# ')) section = section.slice(2);
        if (section.startsWith(' ')) section = section.slice(1);
        
        const lines = section.split('\n');
        const title = lines[0];
        const content = lines.slice(1).join('\n');
        
        let icon = 'üìù'; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞
        
        // –ü–æ–¥–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if (title.includes('–º–∞—Ä—à—Ä—É—Ç')) icon = 'üó∫Ô∏è';
        if (title.includes('–¥–µ–Ω—å') || title.includes('–ø–ª–∞–Ω')) icon = 'üìÖ';
        if (title.includes('–±—é–¥–∂–µ—Ç')) icon = 'üí∞';
        if (title.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')) icon = 'üí°';
        if (title.includes('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')) icon = '‚ÑπÔ∏è';
        
        const formattedContent = content
            .split('\n')
            .map(line => {
                if (line.startsWith('*')) {
                    return `<li>${line.replace('*', '').trim()}</li>`;
                } else if (line.match(/^\d+\./)) {
                    const [num, ...text] = line.split('.');
                    return `<li><div class="day-number">${num}</div><div>${text.join('.').trim()}</div></li>`;
                } else if (line.trim().length > 0) {
                    return `<p>${line}</p>`;
                }
                return '';
            })
            .join('');
        
        formattedSections += formatPlanSection(title, formattedContent, icon);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    const startDate = new Date(formData.startDate);
    const endDate = new Date(formData.endDate);
    const days = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));

    successOverlay.innerHTML = `
        <div class="success-content">
            <div class="plan-header">
                <div class="success-icon">‚úì</div>
                <h2>–í–∞—à –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≥–æ—Ç–æ–≤!</h2>
            </div>
            
            <div class="quick-summary">
                <h3>–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞</h3>
                <div class="summary-grid">
                    <div class="summary-item">
                        <span class="icon">üóìÔ∏è</span>
                        <span class="label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                        <span class="value">${days} –¥–Ω–µ–π</span>
                    </div>
                    <div class="summary-item">
                        <span class="icon">üí∞</span>
                        <span class="label">–ë—é–¥–∂–µ—Ç:</span>
                        <span class="value">${formData.budget} ‚ÇΩ</span>
                    </div>
                    <div class="summary-item">
                        <span class="icon">üéØ</span>
                        <span class="label">–§–æ—Ä–º–∞—Ç:</span>
                        <span class="value">${formData.format.join(', ')}</span>
                    </div>
                    <div class="summary-item">
                        <span class="icon">‚ú®</span>
                        <span class="label">–¶–µ–ª–∏:</span>
                        <span class="value">${formData.goals.join(', ')}</span>
                    </div>
                </div>
            </div>

            <div class="travel-plan">
                ${formattedSections}
            </div>
            
            <div class="button-group">
                <button onclick="downloadPlan()" class="download-button">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M7 10l5 5 5-5M12 15V3"/>
                    </svg>
                    –°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω
                </button>
                <button onclick="closeOverlay()" class="close-button">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        </div>
    `;
    document.body.appendChild(successOverlay);
}

function downloadPlan() {
    const planText = document.querySelector('.travel-plan').innerText;
    const blob = new Blob([planText], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'travel_plan.txt';
    a.click();
    window.URL.revokeObjectURL(url);
}

function closeOverlay() {
    const overlay = document.querySelector('.success-overlay');
    overlay.style.animation = 'fadeOut 0.5s ease-out forwards';
    setTimeout(() => overlay.remove(), 500);
}

function showErrorMessage() {
    const errorOverlay = document.createElement('div');
    errorOverlay.className = 'error-overlay';
    errorOverlay.innerHTML = `
        <div class="error-content">
            <div class="error-icon">‚úï</div>
            <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
            <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
            <button onclick="this.parentElement.parentElement.remove()" class="close-button">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
    `;
    document.body.appendChild(errorOverlay);
}

// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
document.querySelectorAll('.form-group input, .form-group textarea').forEach(input => {
    input.addEventListener('focus', () => {
        input.parentElement.style.transform = 'scale(1.02)';
    });
    
    input.addEventListener('blur', () => {
        input.parentElement.style.transform = 'scale(1)';
    });
}); 