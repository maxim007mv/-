#pragma once
#include <vector>
#include <string>
#include <map>
#include "route_graph.hpp"
#include "schedule_optimizer.hpp"
#include "visit_time_predictor.hpp"
#include "algorithms/dijkstra.hpp"
#include "algorithms/genetic_scheduler.hpp"
#include "data/data_manager.hpp"
#include <sstream>
#include <iomanip>

class RouteOptimizer {
public:
    struct Point {
        double x;
        double y;
    };

    struct Location {
        std::string name;
        double rating;
        int timeRequired; // –≤ —á–∞—Å–∞—Ö
        double cost;
        std::vector<std::string> categories; // –º—É–∑–µ–π, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, etc.
        Point coordinates;  // –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ Location
    };

    struct Day {
        std::vector<Location> places;
        double totalCost;
        int totalTime;
    };

    struct TravelPlan {
        struct DayPlan {
            int day_number;
            std::vector<std::pair<std::string, std::string>> schedule; // <–º–µ—Å—Ç–æ, –≤—Ä–µ–º—è>
            double daily_cost;
            double total_distance;
            std::vector<std::string> meal_suggestions;
        };

        std::string city;
        std::vector<DayPlan> daily_plans;
        std::vector<std::string> recommendations;
        struct UsefulInfo {
            std::vector<std::string> transport_tips;
            std::vector<std::string> weather_forecast;
            std::map<std::string, std::string> emergency_contacts;
            std::vector<std::string> local_customs;
        } useful_info;
    };

private:
    double totalBudget;
    int totalDays;
    std::vector<std::string> preferences;
    std::map<std::string, Location> attractions;
    std::vector<Day> optimizedPlan;
    RouteGraph graph;
    ScheduleOptimizer scheduler;
    VisitTimePredictor predictor;
    DijkstraAlgorithm dijkstra;
    GeneticScheduler geneticScheduler;
    DataManager dataManager;
    
    struct OptimizedRoute {
        std::vector<std::string> places;
        std::vector<std::pair<std::string, int>> schedule;
        std::map<std::string, double> best_visit_times;
        double total_distance;
        int total_time;
    };

    void loadAttractions(const std::string& country);
    bool checkBudgetConstraints(const std::vector<Day>& plan);
    double calculateRouteScore(const std::vector<Day>& plan);
    void optimizeForPreferences();

    bool validateInput(const std::vector<Point>& points) {
        if (points.empty()) return false;
        
        for (const auto& point : points) {
            if (!isValidCoordinates(point)) return false;
        }
        return true;
    }
    
    bool isValidCoordinates(const Point& point) {
        return point.x >= 0 && point.y >= 0 && 
               point.x <= maxCoordinate && point.y <= maxCoordinate;
    }
    
    static constexpr double maxCoordinate = 1000000.0;

public:
    RouteOptimizer(double budget, int days, const std::vector<std::string>& prefs);
    TravelPlan generateOptimalRoute(const std::string& city);
    std::string getDetailedPlan();
    double getEstimatedCosts();
    std::vector<std::string> getRecommendations();
    std::string formatTravelPlan(const TravelPlan& plan) {
        std::stringstream output;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–º–∫–æ–π
        output << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
        output << "‚ïë           üìù –ü–ª–∞–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ " << std::left << std::setw(16) << plan.city << "‚ïë\n";
        output << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";
        
        // –ü–ª–∞–Ω –ø–æ –¥–Ω—è–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
        output << "üóìÔ∏è  –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ –¥–Ω—è–º:\n";
        output << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
        output << "‚îÇ   –í—Ä–µ–º—è  ‚îÇ         –ú–µ—Å—Ç–æ          ‚îÇ –î–ª–∏—Ç-—Ç—å  ‚îÇ  –¶–µ–Ω–∞    ‚îÇ\n";
        output << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";

        for (const auto& day : plan.daily_plans) {
            output << "‚îÇ –î–µ–Ω—å " << day.day_number << std::string(54, ' ') << "‚îÇ\n";
            output << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
            
            for (const auto& [place, time] : day.schedule) {
                output << "‚îÇ " << std::setw(8) << time 
                      << " ‚îÇ " << std::setw(21) << place 
                      << " ‚îÇ " << std::setw(8) << "2 —á–∞—Å–∞"  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                      << " ‚îÇ " << std::setw(8) << "‚ÇΩ1000"   // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                      << " ‚îÇ\n";
            }
            
            // –ü–∏—Ç–∞–Ω–∏–µ
            output << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
            output << "‚îÇ –ü–∏—Ç–∞–Ω–∏–µ:                                                  ‚îÇ\n";
            for (const auto& meal : day.meal_suggestions) {
                output << "‚îÇ ‚Ä¢ " << std::left << std::setw(52) << meal << " ‚îÇ\n";
            }
            
            // –ò—Ç–æ–≥–∏ –¥–Ω—è
            output << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n";
            output << "‚îÇ –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " << std::setw(8) << day.total_distance << " –∫–º"
                   << std::string(24, ' ') << "‚îÇ\n";
            output << "‚îÇ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–Ω—è: ‚ÇΩ" << std::setw(8) << day.daily_cost 
                   << std::string(27, ' ') << "‚îÇ\n";
            output << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n";
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ
        output << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
        for (const auto& rec : plan.recommendations) {
            output << "‚îÇ ‚Ä¢ " << std::left << std::setw(48) << rec << " ‚îÇ\n";
        }
        output << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n";
        
        // –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞—Ö
        output << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ÑπÔ∏è  –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n";
        
        // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        output << "‚îÇ üöá –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:                                          ‚îÇ\n";
        for (const auto& tip : plan.useful_info.transport_tips) {
            output << "‚îÇ   ‚Ä¢ " << std::left << std::setw(48) << tip << " ‚îÇ\n";
        }
        
        // –ü–æ–≥–æ–¥–∞
        output << "‚îÇ üå§Ô∏è  –ü–æ–≥–æ–¥–∞:                                            ‚îÇ\n";
        for (const auto& weather : plan.useful_info.weather_forecast) {
            output << "‚îÇ   ‚Ä¢ " << std::left << std::setw(48) << weather << " ‚îÇ\n";
        }
        
        // –ú–µ—Å—Ç–Ω—ã–µ –æ–±—ã—á–∞–∏
        output << "‚îÇ üè∫ –ú–µ—Å—Ç–Ω—ã–µ –æ–±—ã—á–∞–∏:                                     ‚îÇ\n";
        for (const auto& custom : plan.useful_info.local_customs) {
            output << "‚îÇ   ‚Ä¢ " << std::left << std::setw(48) << custom << " ‚îÇ\n";
        }
        
        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        output << "‚îÇ üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:                               ‚îÇ\n";
        for (const auto& [service, phone] : plan.useful_info.emergency_contacts) {
            output << "‚îÇ   ‚Ä¢ " << std::left << std::setw(20) << service 
                   << ": " << std::setw(27) << phone << " ‚îÇ\n";
        }
        
        output << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n";
        
        return output.str();
    }
}; 